#version 450

#define TG_TRANSVOXEL_CELL_GET_TRIANGLE_COUNT(cell)    ((cell).geometry_counts & 0x0f)

struct tg_regular_cell_data
{
	int geometry_counts;
	int p_vertex_indices[15];
};

const int p_regular_cell_class[256] =
{
	0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
	0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
	0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
	0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
	0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
	0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
	0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
	0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
	0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
	0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
	0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
	0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
	0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
	0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
	0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
	0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00
};

const tg_regular_cell_data p_regular_cell_data[16] = tg_regular_cell_data[16]
(
	tg_regular_cell_data(0x00, int[15](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x31, int[15](0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x62, int[15](0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x42, int[15](0, 1, 2, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x53, int[15](0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x73, int[15](0, 1, 2, 0, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x93, int[15](0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0)),
	tg_regular_cell_data(0x84, int[15](0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7, 0, 0, 0)),
	tg_regular_cell_data(0x84, int[15](0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 0, 0, 0)),
	tg_regular_cell_data(0xC4, int[15](0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0)),
	tg_regular_cell_data(0x64, int[15](0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 0, 0)),
	tg_regular_cell_data(0x64, int[15](0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2, 0, 0, 0)),
	tg_regular_cell_data(0x64, int[15](0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 0, 0, 0)),
	tg_regular_cell_data(0x64, int[15](0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 0, 0)),
	tg_regular_cell_data(0x75, int[15](0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6)),
	tg_regular_cell_data(0x95, int[15](0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8))
);

const int p_regular_vertex_data[256][12] = int[256][12]
(
	int[12](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2315, 0x4113, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x1326, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x6201, 0x4223, 0x1326, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x8337, 0x1326, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2315, 0x8337, 0x1326, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0, 0, 0),
	int[12](0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0),
	int[12](0x2245, 0x2315, 0x8337, 0x1326, 0x1146, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x6201, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0, 0, 0),
	int[12](0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x8337, 0x1326, 0x3304, 0x2245, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x3304, 0x1146, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x5102, 0x1146, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0),
	int[12](0x1326, 0x1146, 0x8157, 0x4113, 0x4223, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x5102, 0x1146, 0x8157, 0x8337, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x1146, 0x8157, 0x8337, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0),
	int[12](0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x3304, 0x2315, 0x8337, 0x8267, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x8267, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x8267, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0),
	int[12](0x4113, 0x4223, 0x8267, 0x2245, 0x2315, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8267, 0x2245, 0x6201, 0x4113, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x8337, 0x8267, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0),
	int[12](0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0),
	int[12](0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146),
	int[12](0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146, 0, 0, 0, 0),
	int[12](0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146, 0, 0, 0),
	int[12](0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157, 0, 0, 0),
	int[12](0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8157, 0x4113, 0x5102, 0x1326, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x6201, 0x4223, 0x8267, 0x8157, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x4223, 0x8267, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337, 0, 0, 0, 0),
	int[12](0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337, 0, 0, 0),
	int[12](0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8267, 0x8157, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0, 0, 0),
	int[12](0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0),
	int[12](0x4113, 0x8157, 0x8267, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x1326, 0x3304, 0x2315, 0x8157, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0, 0, 0),
	int[12](0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0),
	int[12](0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267, 0, 0, 0),
	int[12](0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267, 0, 0, 0, 0),
	int[12](0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267),
	int[12](0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267, 0, 0, 0, 0),
	int[12](0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0),
	int[12](0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245, 0, 0, 0, 0),
	int[12](0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245, 0, 0, 0),
	int[12](0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8267, 0x8337, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267, 0, 0, 0, 0),
	int[12](0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0),
	int[12](0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x8267, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x8267, 0x4223, 0x5102, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x6201, 0x2245, 0x8267, 0x1326, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x8267, 0x1326, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x4113, 0x5102, 0x1146, 0x8267, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326, 0, 0, 0, 0),
	int[12](0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326, 0, 0, 0),
	int[12](0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x8267, 0x4223, 0x6201, 0x3304, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1146, 0x8267, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x1146, 0x8267, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x8337, 0x8157, 0x1146, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146, 0, 0, 0, 0),
	int[12](0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0),
	int[12](0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8157, 0x1146, 0x5102, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x8157, 0x1146, 0x3304, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x8157, 0x1146, 0x5102, 0x6201, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x8157, 0x1146, 0x3304, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113, 0, 0, 0, 0),
	int[12](0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x2245, 0x6201, 0x4223, 0x8337, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102, 0, 0, 0, 0, 0),
	int[12](0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x5102, 0x4113, 0x8157, 0x2245, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x8157, 0x2245, 0x6201, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304, 0, 0, 0, 0, 0, 0),
	int[12](0x2315, 0x8157, 0x2245, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304, 0, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245, 0, 0, 0, 0, 0),
	int[12](0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223, 0, 0, 0, 0, 0, 0),
	int[12](0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304, 0, 0, 0),
	int[12](0x1326, 0x4223, 0x6201, 0x2245, 0x1146, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326, 0, 0, 0, 0, 0, 0),
	int[12](0x2245, 0x1146, 0x5102, 0x4113, 0x2315, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x2245, 0x1146, 0x5102, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x2245, 0x1146, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x8337, 0x2315, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x8337, 0x2315, 0x6201, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x3304, 0x1326, 0x8337, 0x4113, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x8337, 0x4113, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4223, 0x8337, 0x2315, 0x3304, 0x5102, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4223, 0x8337, 0x2315, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x4223, 0x8337, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x4113, 0x2315, 0x3304, 0x1326, 0x4223, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102, 0, 0, 0, 0, 0, 0),
	int[12](0x3304, 0x1326, 0x4223, 0x6201, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x1326, 0x4223, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x5102, 0x4113, 0x2315, 0x3304, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x4113, 0x2315, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0x6201, 0x3304, 0x5102, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	int[12](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
);

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

readonly layout(set = 0, binding = 0, r8i) uniform iimage3D u_voxel_map;

layout(set = 0, binding = 1) uniform ubo
{
	int    u_lod;
	int    u_octree_min_coordinates_x;
	int    u_octree_min_coordinates_y;
	int    u_octree_min_coordinates_z;
	int    u_block_offset_in_octree_x;
	int    u_block_offset_in_octree_y;
	int    u_block_offset_in_octree_z;
};

writeonly layout(set = 0, binding = 2) buffer position_buffer
{
    float u_position_buffer[];
};

writeonly layout(set = 0, binding = 3) buffer normal_buffer
{
    float u_normal_buffer[];
};

layout(set = 0, binding = 4) buffer count_buffer
{
	int u_count;
};

void main()
{
	const ivec3 octree_min_coordinates = ivec3(u_octree_min_coordinates_x, u_octree_min_coordinates_y, u_octree_min_coordinates_z);
	const ivec3 block_offset_in_octree = ivec3(u_block_offset_in_octree_x, u_block_offset_in_octree_y, u_block_offset_in_octree_z);
	
	const ivec3 position = ivec3(gl_GlobalInvocationID);
	const int lod_scale = 1 << u_lod;

	ivec3 p_sample_positions[8];
	int p_cell_samples[8];
	ivec3 p_corner_positions[8];
	vec3 p_triangle_positions[3];

	const ivec3 sample_position_pad = position * lod_scale + block_offset_in_octree;
	
	p_sample_positions[0] = sample_position_pad + ivec3(0, 0, 0);
	p_sample_positions[1] = sample_position_pad + ivec3(lod_scale, 0, 0);
	p_sample_positions[2] = sample_position_pad + ivec3(0, lod_scale, 0);
	p_sample_positions[3] = sample_position_pad + ivec3(lod_scale, lod_scale, 0);
	p_sample_positions[4] = sample_position_pad + ivec3(0, 0, lod_scale);
	p_sample_positions[5] = sample_position_pad + ivec3(lod_scale, 0, lod_scale);
	p_sample_positions[6] = sample_position_pad + ivec3(0, lod_scale, lod_scale);
	p_sample_positions[7] = sample_position_pad + ivec3(lod_scale, lod_scale, lod_scale);
	
	p_cell_samples[0] = imageLoad(u_voxel_map, p_sample_positions[0]).x;
	p_cell_samples[1] = imageLoad(u_voxel_map, p_sample_positions[1]).x;
	p_cell_samples[2] = imageLoad(u_voxel_map, p_sample_positions[2]).x;
	p_cell_samples[3] = imageLoad(u_voxel_map, p_sample_positions[3]).x;
	p_cell_samples[4] = imageLoad(u_voxel_map, p_sample_positions[4]).x;
	p_cell_samples[5] = imageLoad(u_voxel_map, p_sample_positions[5]).x;
	p_cell_samples[6] = imageLoad(u_voxel_map, p_sample_positions[6]).x;
	p_cell_samples[7] = imageLoad(u_voxel_map, p_sample_positions[7]).x;
	
	const int case_code =
		((p_cell_samples[0] >> 7) & 0x01) |
		((p_cell_samples[1] >> 6) & 0x02) |
		((p_cell_samples[2] >> 5) & 0x04) |
		((p_cell_samples[3] >> 4) & 0x08) |
		((p_cell_samples[4] >> 3) & 0x10) |
		((p_cell_samples[5] >> 2) & 0x20) |
		((p_cell_samples[6] >> 1) & 0x40) |
		((p_cell_samples[7] >> 0) & 0x80);
	
	if (case_code != 0 && case_code != 255)
	{
		const ivec3 cell_position_base = position * lod_scale + octree_min_coordinates + block_offset_in_octree;
		
		p_corner_positions[0] = cell_position_base + ivec3(0, 0, 0);
		p_corner_positions[1] = cell_position_base + ivec3(lod_scale, 0, 0);
		p_corner_positions[2] = cell_position_base + ivec3(0, lod_scale, 0);
		p_corner_positions[3] = cell_position_base + ivec3(lod_scale, lod_scale, 0);
		p_corner_positions[4] = cell_position_base + ivec3(0, 0, lod_scale);
		p_corner_positions[5] = cell_position_base + ivec3(lod_scale, 0, lod_scale);
		p_corner_positions[6] = cell_position_base + ivec3(0, lod_scale, lod_scale);
		p_corner_positions[7] = cell_position_base + ivec3(lod_scale, lod_scale, lod_scale);
	
		const int regular_cell_class_index = p_regular_cell_class[case_code];
		const tg_regular_cell_data cell_data = p_regular_cell_data[regular_cell_class_index];
		const int triangle_count = TG_TRANSVOXEL_CELL_GET_TRIANGLE_COUNT(cell_data);
	
		for (int i = 0; i < triangle_count; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				const int edge_code = p_regular_vertex_data[case_code][cell_data.p_vertex_indices[3 * i + j]];
				const int edge_code_low = edge_code & 0xff;
	
				const int v0 = (edge_code_low >> 4) & 0xf;
				const int v1 = edge_code_low & 0xf;
	
				ivec3 i0 = p_sample_positions[v0];
				ivec3 i1 = p_sample_positions[v1];
	
				int d0 = p_cell_samples[v0];
				int d1 = p_cell_samples[v1];
	
				ivec3 p0 = p_corner_positions[v0];
				ivec3 p1 = p_corner_positions[v1];
	
				for (int k = 0; k < u_lod; k++)
				{
					ivec3 midpoint = (i0 + i1) / 2;
					const int imid = imageLoad(u_voxel_map, midpoint).x;
	
					if (imid < 0 && d0 < 0 || imid >= 0 && d0 >= 0)
					{
						d0 = imid;
						i0 = midpoint;
						p0 = (p0 + p1) / 2;
					}
					else if (imid < 0 && d1 < 0 || imid >= 0 && d1 >= 0)
					{
						d1 = imid;
						i1 = midpoint;
						p1 = (p0 + p1) / 2;
					}
				}
	
				const int t = (d1 << 8) / (d1 - d0);
				const float t0 = float(t) / 256.0;
				const float t1 = float(0x100 - t) / 256.0;
	
				if ((t & 0xff) != 0)
				{
					p_triangle_positions[j] = vec3(p0) * t0 + vec3(p1) * t1;
				}
				else
				{
					if (t == 0)
					{
						p_triangle_positions[j] = vec3(p1);
					}
					else
					{
						p_triangle_positions[j] = vec3(p0);
					}
				}
			}
			
			const vec3 v01 = p_triangle_positions[1] - p_triangle_positions[0];
			const vec3 v02 = p_triangle_positions[2] - p_triangle_positions[0];
			const vec3 c = cross(v01, v02);
			const float magsqr = dot(c, c);
	
			if (magsqr != 0.0)
			{
				const float mag = sqrt(magsqr);
				const vec3 n = c / mag;
	
				int index = 3 * atomicAdd(u_count, 3);

				u_position_buffer[index    ] = p_triangle_positions[0].x;
				u_position_buffer[index + 1] = p_triangle_positions[0].y;
				u_position_buffer[index + 2] = p_triangle_positions[0].z;
				u_position_buffer[index + 3] = p_triangle_positions[1].x;
				u_position_buffer[index + 4] = p_triangle_positions[1].y;
				u_position_buffer[index + 5] = p_triangle_positions[1].z;
				u_position_buffer[index + 6] = p_triangle_positions[2].x;
				u_position_buffer[index + 7] = p_triangle_positions[2].y;
				u_position_buffer[index + 8] = p_triangle_positions[2].z;
	
				u_normal_buffer[index    ] = n.x;
				u_normal_buffer[index + 1] = n.y;
				u_normal_buffer[index + 2] = n.z;
				u_normal_buffer[index + 3] = n.x;
				u_normal_buffer[index + 4] = n.y;
				u_normal_buffer[index + 5] = n.z;
				u_normal_buffer[index + 6] = n.x;
				u_normal_buffer[index + 7] = n.y;
				u_normal_buffer[index + 8] = n.z;
			}
		}
	}
}
