#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer triangles_out_block
{
    float[]    data;
};

void main()
{
	const uint triangle_index = gl_GlobalInvocationID.x;
	const uint floats_per_vertex = 14;
	const uint floats_per_triangle = 42;
	const uint offset = triangle_index * floats_per_triangle;

	const vec3 p0 = vec3(
		data[offset + 0 * floats_per_vertex    ],
		data[offset + 0 * floats_per_vertex + 1],
		data[offset + 0 * floats_per_vertex + 2]
	);
	const vec3 p1 = vec3(
		data[offset + 1 * floats_per_vertex    ],
		data[offset + 1 * floats_per_vertex + 1],
		data[offset + 1 * floats_per_vertex + 2]
	);
	const vec3 p2 = vec3(
		data[offset + 2 * floats_per_vertex    ],
		data[offset + 2 * floats_per_vertex + 1],
		data[offset + 2 * floats_per_vertex + 2]
	);

	const vec3 v01 = p1 - p0;
	const vec3 v02 = p2 - p0;
	const vec3 normal = normalize(cross(v01, v02));

	data[offset + 0 * floats_per_vertex + 3] = normal.x;
	data[offset + 0 * floats_per_vertex + 4] = normal.y;
	data[offset + 0 * floats_per_vertex + 5] = normal.z;
	data[offset + 1 * floats_per_vertex + 3] = normal.x;
	data[offset + 1 * floats_per_vertex + 4] = normal.y;
	data[offset + 1 * floats_per_vertex + 5] = normal.z;
	data[offset + 2 * floats_per_vertex + 3] = normal.x;
	data[offset + 2 * floats_per_vertex + 4] = normal.y;
	data[offset + 2 * floats_per_vertex + 5] = normal.z;

	data[offset + 0 * floats_per_vertex + 6] = 0.0;
	data[offset + 0 * floats_per_vertex + 7] = 0.0;
	data[offset + 1 * floats_per_vertex + 6] = 0.0;
	data[offset + 1 * floats_per_vertex + 7] = 0.0;
	data[offset + 2 * floats_per_vertex + 6] = 0.0;
	data[offset + 2 * floats_per_vertex + 7] = 0.0;

	data[offset + 0 * floats_per_vertex +  8] = 0.0;
	data[offset + 0 * floats_per_vertex +  9] = 0.0;
	data[offset + 0 * floats_per_vertex + 10] = 0.0;
	data[offset + 1 * floats_per_vertex +  8] = 0.0;
	data[offset + 1 * floats_per_vertex +  9] = 0.0;
	data[offset + 1 * floats_per_vertex + 10] = 0.0;
	data[offset + 2 * floats_per_vertex +  8] = 0.0;
	data[offset + 2 * floats_per_vertex +  9] = 0.0;
	data[offset + 2 * floats_per_vertex + 10] = 0.0;

	data[offset + 0 * floats_per_vertex + 11] = 0.0;
	data[offset + 0 * floats_per_vertex + 12] = 0.0;
	data[offset + 0 * floats_per_vertex + 13] = 0.0;
	data[offset + 1 * floats_per_vertex + 11] = 0.0;
	data[offset + 1 * floats_per_vertex + 12] = 0.0;
	data[offset + 1 * floats_per_vertex + 13] = 0.0;
	data[offset + 2 * floats_per_vertex + 11] = 0.0;
	data[offset + 2 * floats_per_vertex + 12] = 0.0;
	data[offset + 2 * floats_per_vertex + 13] = 0.0;
}
