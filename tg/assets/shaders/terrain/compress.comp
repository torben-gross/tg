#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer in_buffer
{
    float[]    in_vertices;
};

layout(set = 0, binding = 1) buffer out_buffer
{
	uint       out_triangle_count;
    float[]    out_vertices;
};

void main()
{
	const uint vertices_per_chunk_x = 17;
	const uint vertices_per_chunk_y = 17;
	const uint vertices_per_chunk_z = 17;

	const uint floats_per_vertex = (3 + 3 + 2 + 3 + 3);
	const uint floats_per_triangle = 3 * floats_per_vertex;
	const uint input_triangle_count = 5 * (vertices_per_chunk_x - 1) * (vertices_per_chunk_y - 1) * (vertices_per_chunk_z - 1);

	out_triangle_count = 0;
	for (uint i = 0; i < input_triangle_count; i++)
	{
		const float p0x = in_vertices[i * floats_per_triangle + 0 * floats_per_vertex + 0];
		const float p0y = in_vertices[i * floats_per_triangle + 0 * floats_per_vertex + 1];
		const float p0z = in_vertices[i * floats_per_triangle + 0 * floats_per_vertex + 2];
		
		const float p1x = in_vertices[i * floats_per_triangle + 1 * floats_per_vertex + 0];
		const float p1y = in_vertices[i * floats_per_triangle + 1 * floats_per_vertex + 1];
		const float p1z = in_vertices[i * floats_per_triangle + 1 * floats_per_vertex + 2];
		
		{
			for (uint j = 0; j < floats_per_triangle; j++)
			{
				out_vertices[out_triangle_count * floats_per_triangle + j] = in_vertices[i * floats_per_triangle + j];
			}
			out_triangle_count++;
		}
	}
}
