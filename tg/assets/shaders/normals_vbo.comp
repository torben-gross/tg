#version 450

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer vertices_block
{
    float    vertices[];
};

layout(set = 0, binding = 1) uniform layout_block
{
    uint    vertex_float_count;
    uint    offset_floats_position;
    uint    offset_floats_normal;
    uint    offset_floats_uv;
    uint    offset_floats_tangent;
    uint    offset_floats_bitangent;
};

void main()
{
	const uint x = gl_GlobalInvocationID.x;

    const vec3 v0 = vec3(
        vertices[(3 * x + 0) * vertex_float_count + offset_floats_position + 0],
        vertices[(3 * x + 0) * vertex_float_count + offset_floats_position + 1],
        vertices[(3 * x + 0) * vertex_float_count + offset_floats_position + 2]
    );
    const vec3 v1 = vec3(
        vertices[(3 * x + 1) * vertex_float_count + offset_floats_position + 0],
        vertices[(3 * x + 1) * vertex_float_count + offset_floats_position + 1],
        vertices[(3 * x + 1) * vertex_float_count + offset_floats_position + 2]
    );
    const vec3 v2 = vec3(
        vertices[(3 * x + 2) * vertex_float_count + offset_floats_position + 0],
        vertices[(3 * x + 2) * vertex_float_count + offset_floats_position + 1],
        vertices[(3 * x + 2) * vertex_float_count + offset_floats_position + 2]
    );

    const vec3 v01 = v1 - v0;
    const vec3 v02 = v2 - v0;
    const vec3 normal = normalize(cross(v01, v02));

    vertices[(3 * x + 0) * vertex_float_count + offset_floats_normal + 0] = normal.x;
    vertices[(3 * x + 0) * vertex_float_count + offset_floats_normal + 1] = normal.y;
    vertices[(3 * x + 0) * vertex_float_count + offset_floats_normal + 2] = normal.z;

    vertices[(3 * x + 1) * vertex_float_count + offset_floats_normal + 0] = normal.x;
    vertices[(3 * x + 1) * vertex_float_count + offset_floats_normal + 1] = normal.y;
    vertices[(3 * x + 1) * vertex_float_count + offset_floats_normal + 2] = normal.z;

    vertices[(3 * x + 2) * vertex_float_count + offset_floats_normal + 0] = normal.x;
    vertices[(3 * x + 2) * vertex_float_count + offset_floats_normal + 1] = normal.y;
    vertices[(3 * x + 2) * vertex_float_count + offset_floats_normal + 2] = normal.z;
}
