#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer isolevels_block
{
	precise float    isolevels[];
};

layout(set = 0, binding = 1) uniform chunk_block
{
    precise uint     chunk_vertex_count_x;
    precise uint     chunk_vertex_count_y;
    precise uint     chunk_vertex_count_z;
    precise uint     chunk_coordinate_x;
    precise uint     chunk_coordinate_y;
    precise uint     chunk_coordinate_z;
    precise float    cell_stride_x;
    precise float    cell_stride_y;
    precise float    cell_stride_z;
    precise float    noise_scale_x;
    precise float    noise_scale_y;
    precise float    noise_scale_z;
};

precise int fast_floor(float v)
{
	return v > 0.0 ? int(v) : (int(v) - 1);
}

precise float simplex_noise(float x, float y, float z)
{
	precise int gradient_table[36] = int[36](
		1,  1,  0, -1,  1,  0,  1, -1,  0, -1, -1,  0,
		1,  0,  1, -1,  0,  1,  1,  0, -1, -1,  0, -1,
		0,  1,  1,  0, -1,  1,  0,  1, -1,  0, -1, -1
	);

	precise int permutation_table[256] = int[256](
		151, 160, 137,  91,  90,  15, 131,  13,
		201,  95,  96,  53, 194, 233,   7, 225,
		140,  36, 103,  30,  69, 142,   8,  99,
		 37, 240,  21,  10,  23, 190,   6, 148,
		247, 120, 234,  75,   0,  26, 197,  62,
		 94, 252, 219, 203, 117,  35,  11,  32,
		 57, 177,  33,  88, 237, 149,  56,  87,
		174,  20, 125, 136, 171, 168,  68, 175,
		 74, 165,  71, 134, 139,  48,  27, 166,
		 77, 146, 158, 231,  83, 111, 229, 122,
		 60, 211, 133, 230, 220, 105,  92,  41,
		 55,  46, 245,  40, 244, 102, 143,  54,
		 65,  25,  63, 161,   1, 216,  80,  73,
		209,  76, 132, 187, 208,  89,  18, 169,
		200, 196, 135, 130, 116, 188, 159,  86,
		164, 100, 109, 198, 173, 186,   3,  64,
		 52, 217, 226, 250, 124, 123,   5, 202,
		 38, 147, 118, 126, 255,  82,  85, 212,
		207, 206,  59, 227,  47,  16,  58,  17,
		182, 189,  28,  42, 223, 183, 170, 213,
		119, 248, 152,   2,  44, 154, 163,  70,
		221, 153, 101, 155, 167,  43, 172,   9,
		129,  22,  39, 253,  19,  98, 108, 110,
		 79, 113, 224, 232, 178, 185, 112, 104,
		218, 246,  97, 228, 251,  34, 242, 193,
		238, 210, 144,  12, 191, 179, 162, 241,
		 81,  51, 145, 235, 249,  14, 239, 107,
		 49, 192, 214,  31, 181, 199, 106, 157,
		184,  84, 204, 176, 115, 121,  50,  45,
		127,   4, 150, 254, 138, 236, 205,  93,
		222, 114,  67,  29,  24,  72, 243, 141,
		128, 195,  78,  66, 215,  61, 156, 180
	);

	const precise float s = (x + y + z) * 0.333333333;
	const precise int i = fast_floor(x + s);
	const precise int j = fast_floor(y + s);
	const precise int k = fast_floor(z + s);

	const precise float g3 = 0.166666667;
	const precise float t = (i + j + k) * g3;
	const precise float x0 = x - (float(i) - t);
	const precise float y0 = y - (float(j) - t);
	const precise float z0 = z - (float(k) - t);

	int i1, j1, k1;
	int i2, j2, k2;
	if (x0 >= y0)
	{
		if (y0 >= z0)
		{
			i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;
		}
		else if (x0 >= z0)
		{
			i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;
		}
		else
		{
			i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;
		}
	}
	else
	{
		if (y0 < z0)
		{
			i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;
		}
		else if (x0 < z0)
		{
			i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;
		}
		else
		{
			i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;
		}
	}

	const precise float x1 = x0 - i1 + g3;
	const precise float y1 = y0 - j1 + g3;
	const precise float z1 = z0 - k1 + g3;
	const precise float x2 = x0 - i2 + 2.0 * g3;
	const precise float y2 = y0 - j2 + 2.0 * g3;
	const precise float z2 = z0 - k2 + 2.0 * g3;
	const precise float x3 = x0 - 1.0 + 3.0 * g3;
	const precise float y3 = y0 - 1.0 + 3.0 * g3;
	const precise float z3 = z0 - 1.0 + 3.0 * g3;

	const precise int ii = i & 255;
	const precise int jj = j & 255;
	const precise int kk = k & 255;
	const precise int gi0 = permutation_table[ii      + permutation_table[jj      + permutation_table[kk     ]]] % 12;
	const precise int gi1 = permutation_table[ii + i1 + permutation_table[jj + j1 + permutation_table[kk + k1]]] % 12;
	const precise int gi2 = permutation_table[ii + i2 + permutation_table[jj + j2 + permutation_table[kk + k2]]] % 12;
	const precise int gi3 = permutation_table[ii +  1 + permutation_table[jj +  1 + permutation_table[kk +  1]]] % 12;

	precise float n0, n1, n2, n3;

	precise float t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0;
	if (t0 < 0.0f)
	{
		n0 = 0.0;
	}
	else
	{
		t0 *= t0;
		const precise float dot = float(gradient_table[gi0 * 3 + 0]) * x0 + float(gradient_table[gi0 * 3 + 1]) * y0 + float(gradient_table[gi0 * 3 + 2]) * z0;
		n0 = t0 * t0 * dot;
	}

	precise float t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1;
	if (t1 < 0.0)
	{
		n1 = 0.0;
	}
	else
	{
		t1 *= t1;
		const precise float dot = float(gradient_table[gi1 * 3 + 0]) * x1 + float(gradient_table[gi1 * 3 + 1]) * y1 + float(gradient_table[gi1 * 3 + 2]) * z1;
		n1 = t1 * t1 * dot;
	}

	precise float t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2;
	if (t2 < 0.0)
	{
		n2 = 0.0;
	}
	else
	{
		t2 *= t2;
		const precise float dot = float(gradient_table[gi2 * 3 + 0]) * x2 + float(gradient_table[gi2 * 3 + 1]) * y2 + float(gradient_table[gi2 * 3 + 2]) * z2;
		n2 = t2 * t2 * dot;
	}

	precise float t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3;
	if (t3 < 0.0)
	{
		n3 = 0.0;
	}
	else
	{
		t3 *= t3;
		const precise float dot = float(gradient_table[gi3 * 3 + 0]) * x3 + float(gradient_table[gi3 * 3 + 1]) * y3 + float(gradient_table[gi3 * 3 + 2]) * z3;
		n3 = t3 * t3 * dot;
	}

	const precise float result = 32.0 * (n0 + n1 + n2 + n3);
	return result;
}

void main()
{
	const precise uint x = gl_GlobalInvocationID.x;
	const precise uint y = gl_GlobalInvocationID.y;
	const precise uint z = gl_GlobalInvocationID.z;

    const precise float noise_x = (float(chunk_vertex_count_x) * float(chunk_coordinate_x) + float(x)) * noise_scale_x;
    const precise float noise_y = (float(chunk_vertex_count_y) * float(chunk_coordinate_y) + float(y)) * noise_scale_y;
    const precise float noise_z = (float(chunk_vertex_count_z) * float(chunk_coordinate_z) + float(z)) * noise_scale_z;
	const precise float noise = simplex_noise(noise_x, noise_y, noise_z);

	isolevels[chunk_vertex_count_x * chunk_vertex_count_y * ((chunk_vertex_count_z - 1) - z) + chunk_vertex_count_x * y + x] = noise;
}
